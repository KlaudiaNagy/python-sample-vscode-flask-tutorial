# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '830a1086-f12e-4672-8a52-2809d8797fc9'

  # Web app name
  webAppName: 'newhelloworld'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'newhelloworld'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Prepare
  displayName: Prepare
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Check
  dependsOn: Prepare
  jobs:   
    - job: Lint_check
      displayName: 'Lint checker'
      steps:
        - script: |
            python3 -m venv antenv
            source antenv/bin/activate
            python3 -m pip install --upgrade pip
            make
          # make install
          # make lint
          workingDirectory: $(projectRoot)
          displayName: 'Run lint tests'
    
    - job: Copyright_check
      displayName: 'Copyright check'
      steps:
      - task: PythonScript@0
        inputs:
          scriptSource: 'inline'
          script: |
            print('Copyright check')
    
    - job: License_check
      displayName: 'License check'
      steps:
      - task: PythonScript@0
        inputs:
          scriptSource: 'inline'
          script: |
            print('License check')

- stage: Test
  dependsOn: Check
  jobs:
    - job: Pytest
      displayName: 'Pytest'
      steps:
        - script: |
            pip3 install pytest pytest-azurepipelines
          # pytest
          workingDirectory: $(projectRoot)
          displayName: 'Run pytest'

    - job: Unit_tests
      displayName: 'Unit tests'
      steps:
        - task: PythonScript@0
          inputs:
            scriptSource: 'inline'
            script: |
              print('Run unit tests')
          displayName: 'Run unit tests'

    - job: Feature_tests
      displayName: 'Feature tests'
      steps:
        - task: PythonScript@0
          inputs:
            scriptSource: 'inline'
            script: |
              print('Run feature tests')
          displayName: 'Run feature tests'

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : newhelloworld'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

- stage: Cleanup
  dependsOn:
    - Prepare
    - Check
    - Test
    - Deploy
  condition: always()
  jobs:
    - job: Cleanup_environment
      displayName: 'Cleaning up environment'
      steps:
        - task: PythonScript@0
          inputs:
            scriptSource: 'inline'
            script: |
              print('Cleanup')
          displayName: 'Cleanup'